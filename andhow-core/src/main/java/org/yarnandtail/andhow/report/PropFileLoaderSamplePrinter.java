package org.yarnandtail.andhow.report;

import org.yarnandtail.andhow.internal.StaticPropertyConfigurationInternal;
import org.yarnandtail.andhow.AndHow;
import org.yarnandtail.andhow.api.*;
import org.yarnandtail.andhow.util.TextUtil;

/**
 *
 * @author ericeverman
 */
public class PropFileLoaderSamplePrinter extends BaseSamplePrinter implements SamplePrinter {
	protected PrintFormat format = new PropFileFormat();
	
	public PropFileLoaderSamplePrinter() {
	}
	
	@Override
	public PrintFormat getFormat() {
		return format;
	}
	
	
	@Override
	public TextBlock getSampleFileStart() {
		return null;
	}
	
	@Override
	public TextBlock getSampleStartComment(StaticPropertyConfigurationInternal definition) {
		TextBlock tb = new TextBlock(true, true);
		tb.addHR();
		tb.addLine("Sample properties file generated by " + AndHow.ANDHOW_NAME);
		tb.addLine(AndHow.ANDHOW_TAG_LINE + "  -  " + AndHow.ANDHOW_URL);
		tb.addLine("Note: "+ definition.getNamingStrategy().getNameMatchingDescription());
		tb.addHR();
		return tb;
		
	}
	
	@Override
	public String getInAliaseString(StaticPropertyConfigurationInternal definition, EffectiveName name) {
		return name.getActualName();
	}
	
	@Override
	public TextBlock getActualProperty(StaticPropertyConfigurationInternal definition, 
			GroupProxy group, Property prop) throws Exception {
		
		TextBlock tb = new TextBlock(false, false);
		
		String propCanonName = group.getCanonicalName(prop);
		
		if (prop.getDefaultValue() != null) {
			tb.addLine(
					TextUtil.format("{} = {}", 
						propCanonName, 
						prop.getDefaultValue())
			);
		} else {
			tb.addLine(
					TextUtil.format("{} = [{}]", 
						propCanonName, 
						prop.getValueType().getDestinationType().getSimpleName())
			);
		}
		
		return tb;
	}
	
	@Override
	public TextBlock getSampleFileEnd() {
		return null;
	}

	@Override
	public String getSampleFileExtension() {
		return "properties";
	}
}
